# This workflow will install Python dependencies, run pylint and pytest and publish code-coverage metrics
name: Python CI Workflow

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build_test_publish:
    runs-on: self-hosted
    container:
        image: "ghcr.io/daversomethingsomethingorg/alma9-py3-p4d:main"
        credentials:
           username: ${{ github.actor }}
           password: ${{ secrets.github_token }}

    permissions: write-all

    steps:
    - uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        pip install -e .
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Analysing the code with pylint
      run: |
        pylint --output-format=json --output=pylint.json --recursive=y src/ || /bin/true
        pylint-json2html pylint.json > docs/pylint.html
        pylint --output-format=colorized --recursive=y src/ || pylint-exit $?

    - name: Artifact Lint Results
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: Pylint results
        path: pylint.json

    - name: Test with pytest
      run: |
        pytest --cov=P4OO --cov-report html:docs/coverage --junitxml=junit-report.xml || /bin/true
        coverage report
        coverage xml
 
    - name: Report Unit Test Results
      uses: dorny/test-reporter@v1.8.0
      if: ${{ always() }}
      with:
        name: JUnit Test Report
        path: junit-report.xml
        reporter: java-junit
#        fail-on-error: true
        fail-on-error: false

    - name: Artifact Code Coverage Results
      uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: Cobertura Coverage Report
        path: coverage.xml

    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      if: ${{ github.ref == 'refs/heads/main' && always() }}
      with:
        filename: coverage.xml
        badge: true
#        fail_below_min: true
        fail_below_min: false
        format: markdown
#        hide_branch_rate: false
#        hide_complexity: true
        indicators: true
        output: both
#        thresholds: '60 80'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: ${{ github.event_name == 'pull_request' && github.ref == 'refs/heads/main' && always() }}
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Build binary wheel and a source tarball
      run: |
        python3 -m build

    - name: Artifact Python distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: Python distribution packages
        path: dist/

#    - name: Publish distribution ðŸ“¦ to PyPI
#      uses: pypa/gh-action-pypi-publish@release/v1
#      if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes

    - name: Artifact Pages contributions
      uses: actions/upload-artifact@v4
      with:
        name: pages-contributions
        path: docs/


  build_and_deploy_docs:
    needs: build_test_publish
    if: ${{ github.ref == 'refs/heads/main' }}

    permissions: write-all
#    permissions:
#      pages: write      # to deploy to Pages
#      id-token: write   # to verify the deployment originates from an appropriate source

    uses: daversomethingsomethingorg/p4oo.py/.github/workflows/mkdocs_deploy_pages.yml@main
    with:
        runner_tag: self-hosted
        container_image: "ghcr.io/daversomethingsomethingorg/alma9-py3-p4d:main"
        input_artifact: pages-contributions
    secrets: inherit
